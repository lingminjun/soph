<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD SQL 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ssn.lmj.user.db.dao.UserDAO">

    <resultMap id="userDOResult" type="ssn.lmj.user.db.dobj.UserDO">
        <result column="id" property="id"/>
        <result column="nick" property="nick"/>
        <result column="name" property="name"/>
        <result column="id_number" property="idNumber"/>
        <result column="head" property="head"/>
        <result column="mobile" property="mobile"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <result column="grade" property="grade"/>
        <result column="rank" property="rank"/>
        <result column="role" property="role"/>
        <result column="join_from" property="joinFrom"/>
        <result column="source" property="source"/>
        <result column="status" property="status"/>
        <result column="create_at" property="createAt"/>
        <result column="modified_at" property="modifiedAt"/>
    </resultMap>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="ssn.lmj.user.db.dobj.UserDO">
        insert into `s_user` (`id`,`nick`,`name`,`id_number`,`head`,`mobile`,`email`,`gender`,`grade`,`rank`,`role`,`join_from`,`source`,`status`,`create_at`,`modified_at`) values (#{id},#{nick},#{name},#{idNumber},#{head},#{mobile},#{email},#{gender},#{grade},#{rank},#{role},#{joinFrom},#{source},#{status},(unix_timestamp() * 1000),(unix_timestamp() * 1000))
    </insert>

    <insert id="insertOrUpdate" useGeneratedKeys="true" keyProperty="id" parameterType="ssn.lmj.user.db.dobj.UserDO">
        insert into `s_user` (`id`,`nick`,`name`,`id_number`,`head`,`mobile`,`email`,`gender`,`grade`,`rank`,`role`,`join_from`,`source`,`status`,`create_at`,`modified_at`) values (#{id},#{nick},#{name},#{idNumber},#{head},#{mobile},#{email},#{gender},#{grade},#{rank},#{role},#{joinFrom},#{source},#{status},(unix_timestamp() * 1000),(unix_timestamp() * 1000)) on duplicate key update 
            modified_at = (unix_timestamp() * 1000) 
        <if test="nick != null">
            ,`nick` = #{nick}
        </if>
        <if test="name != null">
            ,`name` = #{name}
        </if>
        <if test="idNumber != null">
            ,`id_number` = #{idNumber}
        </if>
        <if test="head != null">
            ,`head` = #{head}
        </if>
        <if test="mobile != null">
            ,`mobile` = #{mobile}
        </if>
        <if test="email != null">
            ,`email` = #{email}
        </if>
        <if test="gender != null">
            ,`gender` = #{gender}
        </if>
        <if test="grade != null">
            ,`grade` = #{grade}
        </if>
        <if test="rank != null">
            ,`rank` = #{rank}
        </if>
        <if test="role != null">
            ,`role` = #{role}
        </if>
        <if test="joinFrom != null">
            ,`join_from` = #{joinFrom}
        </if>
        <if test="source != null">
            ,`source` = #{source}
        </if>
        <if test="status != null">
            ,`status` = #{status}
        </if>
    </insert>

    <update id="update" parameterType="ssn.lmj.user.db.dobj.UserDO">
        update `s_user` set 
            modified_at = (unix_timestamp() * 1000) 
        <if test="nick != null">
            ,`nick` = #{nick}
        </if>
        <if test="name != null">
            ,`name` = #{name}
        </if>
        <if test="idNumber != null">
            ,`id_number` = #{idNumber}
        </if>
        <if test="head != null">
            ,`head` = #{head}
        </if>
        <if test="mobile != null">
            ,`mobile` = #{mobile}
        </if>
        <if test="email != null">
            ,`email` = #{email}
        </if>
        <if test="gender != null">
            ,`gender` = #{gender}
        </if>
        <if test="grade != null">
            ,`grade` = #{grade}
        </if>
        <if test="rank != null">
            ,`rank` = #{rank}
        </if>
        <if test="role != null">
            ,`role` = #{role}
        </if>
        <if test="joinFrom != null">
            ,`join_from` = #{joinFrom}
        </if>
        <if test="source != null">
            ,`source` = #{source}
        </if>
        <if test="status != null">
            ,`status` = #{status}
        </if>
        where id = #{id} 
    </update>

    <delete id="deleteById">
        delete from `s_user` where id = #{id} 
    </delete>

    <select id="getById" resultMap="userDOResult">
        select `id`,`nick`,`name`,`id_number`,`head`,`mobile`,`email`,`gender`,`grade`,`rank`,`role`,`join_from`,`source`,`status`,`create_at`,`modified_at` 
        from `s_user` 
        where id = #{id} 
    </select>

    <select id="getByIdForUpdate" resultMap="userDOResult">
        select `id`,`nick`,`name`,`id_number`,`head`,`mobile`,`email`,`gender`,`grade`,`rank`,`role`,`join_from`,`source`,`status`,`create_at`,`modified_at` 
        from `s_user` 
        where id = #{id} 
        for update 
    </select>

    <select id="queryByIds" resultMap="userDOResult">
        select `id`,`nick`,`name`,`id_number`,`head`,`mobile`,`email`,`gender`,`grade`,`rank`,`role`,`join_from`,`source`,`status`,`create_at`,`modified_at` 
        from `s_user` 
        where id en 
        <foreach collection="list" item="theId" index="index" 
             open="(" close=")" separator=","> 
             #{theId}  
        </foreach>  
    </select>

    <select id="queryByEmail" resultMap="userDOResult">
        select `id`,`nick`,`name`,`id_number`,`head`,`mobile`,`email`,`gender`,`grade`,`rank`,`role`,`join_from`,`source`,`status`,`create_at`,`modified_at` 
        from `s_user` 
        where `email` = #{email}
        <if test="sortField != null and sortField != ''">
            order by `${sortField}` <if test="isDesc"> desc </if> 
        </if>
        limit #{offset},#{limit}
    </select>

    <select id="queryByIdNumber" resultMap="userDOResult">
        select `id`,`nick`,`name`,`id_number`,`head`,`mobile`,`email`,`gender`,`grade`,`rank`,`role`,`join_from`,`source`,`status`,`create_at`,`modified_at` 
        from `s_user` 
        where `id_number` = #{idNumber}
        <if test="sortField != null and sortField != ''">
            order by `${sortField}` <if test="isDesc"> desc </if> 
        </if>
        limit #{offset},#{limit}
    </select>

    <select id="queryByMobile" resultMap="userDOResult">
        select `id`,`nick`,`name`,`id_number`,`head`,`mobile`,`email`,`gender`,`grade`,`rank`,`role`,`join_from`,`source`,`status`,`create_at`,`modified_at` 
        from `s_user` 
        where `mobile` = #{mobile}
        <if test="sortField != null and sortField != ''">
            order by `${sortField}` <if test="isDesc"> desc </if> 
        </if>
        limit #{offset},#{limit}
    </select>

    <select id="countByEmail" resultType="java.lang.Long">
        select count(1) from `s_user` 
        where `email` = #{email}
    </select>

    <select id="countByIdNumber" resultType="java.lang.Long">
        select count(1) from `s_user` 
        where `id_number` = #{idNumber}
    </select>

    <select id="countByMobile" resultType="java.lang.Long">
        select count(1) from `s_user` 
        where `mobile` = #{mobile}
    </select>

    <!-- Custom sql mapper -->
    <select id="findUserByMobile" resultMap="userDOResult">
        select * from `s_user` where `mobile` = #{mobile}
    </select>

    <select id="findUserByEmail" resultMap="userDOResult">
        select * from `s_user` where `email` = #{email}
    </select>

    <select id="findUserByIdNumber" resultMap="userDOResult">
        select * from `s_user` where `id_number` = #{idNumber} limit 1
    </select>

</mapper>

